//
// Program mierzy czas utrzymywania sie stanu wysokiego na linii 0 portu A
// ("szerokosc" impulsu - czas pomiedzy kolejnymi zboczami: rosnacym i opadajacym)
// i wykorzystuje tryb Input Caputre ukladu licznikowego (opis - rozdzial 18.3.5).
//
// Zadania obowiazkowe:
// 1. Ustalic rozdzielczosc i zakres pomiaru, dokonczyc konfiguracje timera TIM2
// 2. Sprawdzic poprawnosc wynikow porownujac:
//
// - czas nacisniecia przycisku ze wskazaniem stopera/zegarka,
// - szerokosc impulsu pochodzacego z generatora wzorcowego
//   (z nastawami generatora, ew. wskazaniami miernika czestotliwosci / oscyloskopu).
//
// 3. Zadanie dodatkowe - dopisac obsluge przekroczenia zakresu pomiarowego.

#include <stdio.h>
#include "stm32f4xx.h"
#include "GLCD.h"

#define __FI       1
  #define __FONT_WIDTH  16
  #define __FONT_HEIGHT 24

void Clock_Config(void);

char tekst[20];

int main(void){ 

	
// --- inicjalizacja i konfiguracja wyswietlacza LCD ---
	
	GLCD_Initialize(); 
	GLCD_Clear(White);
	GLCD_SetBackColor(White);
  GLCD_SetTextColor(Black);

// --- konfiguracja peryferiow ---
	
  RCC->AHB1ENR |= ((1<<0) | (1<<6));       		// wlacz "zegar" dla GPIO A i G
	RCC->APB1ENR |= (1<<0);   									// wlacz "zegar" dla TIM2

  GPIOG->MODER |= (1<<(2*13)) | (1<<(2*14));	// linie G13 i G14 jako wyjscia
	
	GPIOA->MODER |= (2<<2*0);										// linia A0 - ALTERNATE FUNCTION AF1 TIM2 CH1
	GPIOA->AFR[0] |= (1<<4*0);
		
	NVIC->ISER[0] |= (1<<28); 									// wlacz przerwanie dla TIM2

// --- 1a --- 
// Ustal zakres pomiarowy i rozdzielczosc pomiaru.

//licznik 4 mld bo tim2 32 bitowy -> 2^32
		TIM2->PSC	=	15999;												// preskaler
		TIM2->ARR = 2999;												// opcjonalnie zakres zliczania (0...n)

// --- 1b --- 
// Konfiguracja timera TIM2 w trybie Input Capture (kanal 1)

// CC1S = 01 - Capture Compare ch. 1 jako wejscie,
// sygnal IC1 pobierany z linii T1
// Rozdzial 18.3.4 - schemat nr 159,
// Opis rejestru w rozdziale 18.4.7 (Reference Manual)

	TIM2->CCMR1 |= (1 << 0) | (0 << 1);

// Sterowanie licznikiem (Slave Mode / SMS) - tryb zerowania (reset)
// w chwili nadejscia zbocza rosnacego oraz wejscie synchronizacji licznika:
// Ustawic bity:
// SMS=100 - Slave Reset Mode,
// TS =101 - Trigger Selection - Timer Input 1,
// Opis rejestru w rozdziale 18.4.3 (Reference Manual).
	
	TIM2->SMCR |= (1 << 6) | (0 << 5) | ( 1 << 4) |  (1 << 2) | (0 << 1) | (0 << 0);

// Wlaczyc tryb pracy "Capture" kanalu 1. - zapis wartosci chwilowej licznika CNT do rejestru CCR1:
// bit CC1E
// Ustawic reakcje wejscia sterujacego praca timera na oba zbocza: rosnace i opadajace:
// bity CC1P i CC1NP.
// Opis rejestru w rozdziale 18.4.9 (Reference Manual).

	TIM2->CCER |= (1 << 0) | (1 << 1) | (1 << 3);
																							
// --- 3a --- Obsluga przekroczenia zakresu pomiarowego

	TIM2->DIER |=	(1 << 0);												// UIE - wlacz przerwanie od przepelnienia (Update) TIM2.
	TIM2->CR1  |= (1 << 2);													// Update Request Source: 1 - tylko od przepelnienia
																					// 0 - rowniez w chwili przechwytywania i zerowania.
																					// Rozdzialy 18.4.1 / 18.4. Reference Manual.

  TIM2->CR1 |= 1;													// Wlacz licznik.
	
	for(;;) {
		
// Program glowny: 		
// Wyswietl odpowiedni komunikat gdy trwa pomiar, a po jego zaknczeniu - zmierzony czas.
//
// Czas nalezy odczytac (ew. wyskalowac) z rejestru Caputer/Compare kanalu 1 timera 2 (CCR1).
			
			if (GPIOA->IDR & 1) GLCD_DisplayString(1, 0, __FI,"Pomiar!             ");
			else {
				sprintf(tekst,"Czas = %u ms      ",TIM2->CCR1);
				GLCD_DisplayString(1, 0, __FI,tekst);
			}

// --- 3c --- Obsluga przekroczenia zakresu pomiarowego
			
	}
}


// --- 3b --- Obsluga przekroczenia zakresu pomiarowego

void TIM2_IRQHandler(void) 
{	
			TIM2->SR &= ~1;
			while (GPIOA->IDR & 1){
					//sprintf(tekst, "OVERFLOW");
					GPIOG->ODR ^= (1 << 13);
					//GLCD_DisplayString(1,0,__FI,tekst);
			}
}

